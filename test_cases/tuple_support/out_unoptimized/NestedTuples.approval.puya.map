{
  "version": 3,
  "sources": [
    "../nested_tuples.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;;;AAII;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAEA;;AAAA;;AAAA;;AAAA;;AAAA;AAGJ;;;AAEI;;AAAA;;AACA;AAAA;AAGJ;;;AAEqB;;AAAA;;AAAA;AAAjB;AAAM;AACU;AAAT;AAAP;AADsC;;AAErB;AAAV;AAAP;AACO;AAAU;AAAV;AAAa;;AAAA;;AAAA;AAAb;;AAAA;AAAA;AAAP;AACO;AAAc;AAAd;AAAP;AACqB;;AAAA;;AAAA;AAAd;;AAAA;AAAP;AAEY;AAAL;AAAP;AACY;;AAAA;;AAAA;AAAL;AAAP;;AAcQ;;AAMQ;AAAT;AAAP;AAbI;AAckB;AAAf;AALH;;AAKqB;AAAlB;AAAA;AAAP;AAVY;;;AAWO;AAAZ;AAVK;;;AAUY;AAAjB;AAAA;AAAP;;AAGJ;;;AAGS;AADL;;AAAA;AAGK;AAHL;AACK;AAIa;AAAX;AAAP;AAJK;AAKW;AAAT;AAAP;AACO;AAAW;AAAX;AAAP;AACO;AAAA;;AAAA;AAAP;AALK;AAMa;AAAX;AAAP;AANK;AAOW;AAAT;AAAP;AAEJ;;AAAA;;;AAEa;;AADL;;AAEK;;AAFL;;AAGK;;AAHL;;AAKe;AAAA;;AAAA;;AAAA;AAAZ;;AAAA;AAAP;AACA;;AACe;AAAA;;AAAA;;AAAA;AAAR;AAAP;AACO;;AAAA;;AAAA;AAAP;AAEA;;AAAA;AACA;;AAAA;AACc;AAAA;;AAAA;;AAAA;AAAP;AAAP;AACmB;AAAA;;AAAA;;AAAA;AAAZ;AAAP;;AAOQ;AACI;;;;;;;;;;AADJ;AAAA;;;;AAAA;AAAA;AAKR;;;AAAe;AAAA;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACO;AAAA;AAAkB;AAAlB;AAAP;;AAGJ;;;;;AAIY;;AAFJ;AACA;AAIA;;AACS;AAAT;;AAAA;AAAA;;AAFR;;AAAA;;;;;;;;;;;AAJQ;AAQA;;AAPA;AAQS;;AAAA;AAAT;;AAAA;AAAA;;AADR;;AAAA;;;;;;;;AAGW;;AAAS;AAAT;AAAc;;AAAd;AAAP;;;;;;AAVI;AAOA;;AAPA;;;;;;;AADA;AAQA;;AARA;;;;;;;AACA;AAOA;;AARA;;;;;;;;AACA;AAGA;;AAHA;;;;;;;AADA;AAIA;;AAJA;;;;;;;AACA;AAGA;;AAJA;;;;AAlLA;;AAA+B;AAA/B;;AAGR;;;AAC0B;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAClB;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAER;;;;;;;;AAEef;;;AAEuC;;AAAQ;AAAR;AADN;;AAAA;AAAA;;AAAA;AAAA;AACzB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AADyB;;AAAA;AACM;;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAC8B;;AAAA;AAAA;;AAAA;AAAA;AACf;AAAA;AAAA;AAAA;AAAA;AAAO;;AAAP;AAAA;AAAA;AAAA;;AAAP;AAER;;;;AACkC;;AAAA;AAAA;;AAAA;AAAA;AACnB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;;AAAA;AAAA;;AAAA;;AAAA;AAAO;AAAA;;AAAA;;;;AAIF;AAAc;AACZ;;;AAAA;AAAiB;AAAjB;AAAA;AAAkC;AAAlC;AAAA;AAAP;AADmB;AAOF;AAAV;AAAP;AAPK;AAGA;AAAW;AADX;AAFA;AAAc;AAAA;AASI;;;AAAA;;AAAA;;AAAA;;AAAA;AAAvB;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AACkB;AAAX;AAAA;AAAyB;AAAzB;AAAA;AAAP;AACkB;AAAX;AAAA;AAAsB;AAAtB;AAAA;AAAP;AACY;AAAL;AAAP;AAEgB;AAAW;AAA3B;;;AACA;;;AACoB;AAAoB;AAAxC;;;AACoB;AAAoB;AAAxC;;;AACA;;;AAhBK;AAAA;AAkBE;AApBF;AAAA;AAoBE;AApBY;AAAA;AAoBZ;AAAA;AAAA;AAAP;AAEA;;;AAEA;;;AACO;AAAP;AAER;;;AAIQ;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAAA;AAAgC;AAAhC;AAAA;;AAAA;AAAA;AACQ;;AAAc;AAAY;;;;;;AAAlC;AAER;;;AAEQ;;AAA+B;AAA/B;AACS;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACc;;AAAhB;AAAP;AACO;AAAA;;AAAA;AAAA;AAAgC;AAAhC;AAAP;;AAFgC;;;AAAA;;;;;AA/ExC;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AAkEK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlEL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAkEK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7DL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AA6DK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtDL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA7BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBK;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAbL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock 0x 0x151f7c75 \"Hi\" \"There\" \"build_nested_call_count\" \"box\" \"pwl\" \"hi\""
    },
    "59": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "64": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "op": "callsub __init__"
    },
    "67": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "70": {
      "op": "return",
      "stack_out": []
    },
    "71": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "params": {
        "_a#0": "bytes",
        "args.0#0": "uint64",
        "args.1#0": "uint64",
        "args.2.0#0": "uint64",
        "args.2.1.0#0": "bytes",
        "args.2.1.1#0": "bytes",
        "_b#0": "bytes"
      },
      "block": "test_rearrange",
      "stack_in": [],
      "op": "proto 7 5"
    },
    "74": {
      "block": "test_rearrange_block@0",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "76": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "78": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "80": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "82": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ]
    },
    "84": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "e#0",
        "d#0"
      ]
    },
    "85": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "e#0",
        "d#0",
        "a#0"
      ]
    },
    "87": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "e#0",
        "d#0",
        "a#0",
        "b#0"
      ]
    },
    "89": {
      "op": "uncover 4",
      "stack_out": [
        "e#0",
        "d#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "91": {
      "op": "uncover 4",
      "stack_out": [
        "d#0",
        "a#0",
        "b#0",
        "c#0",
        "e#0"
      ]
    },
    "93": {
      "retsub": true,
      "op": "retsub"
    },
    "94": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_swap",
      "params": {
        "args.0#0": "bytes",
        "args.1#0": "bytes"
      },
      "block": "test_swap",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "97": {
      "block": "test_swap_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "99": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "101": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "102": {
      "retsub": true,
      "op": "retsub"
    },
    "103": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "params": {
        "num1#0": "uint64",
        "num2#0": "uint64"
      },
      "block": "test_intrinsics",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "106": {
      "block": "test_intrinsics_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "num1#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)"
      ]
    },
    "108": {
      "op": "frame_dig -1",
      "defined_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ],
      "stack_out": [
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "110": {
      "op": "addw",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.0#0",
        "nt.1.1#0"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1"
      ]
    },
    "113": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "1",
        "1"
      ]
    },
    "114": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%2#0"
      ]
    },
    "115": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "116": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "nt.1.0#0",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42"
      ]
    },
    "118": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "42",
        "42"
      ]
    },
    "119": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%3#0"
      ]
    },
    "120": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "121": {
      "op": "dup",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "nt.1.1#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0"
      ]
    },
    "124": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)"
      ]
    },
    "126": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "128": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "129": {
      "op": "dig 3",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "nt.1.1#0 (copy)",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%5#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "131": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "132": {
      "op": "&&",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%7#0"
      ]
    },
    "133": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "134": {
      "op": "dup",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)"
      ]
    },
    "135": {
      "op": "intc_0 // 0",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "nt.1.0#0 (copy)",
        "0"
      ]
    },
    "136": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%8#0"
      ]
    },
    "137": {
      "op": "assert",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0"
      ]
    },
    "138": {
      "op": "frame_dig -2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)"
      ]
    },
    "140": {
      "op": "frame_dig -1",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "142": {
      "op": "+",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0"
      ]
    },
    "143": {
      "op": "dig 2",
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%9#0",
        "nt.1.1#0 (copy)"
      ]
    },
    "145": {
      "op": "==",
      "defined_out": [
        "nt.1.0#0",
        "nt.1.1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "nt.1.1#0",
        "nt.1.0#0",
        "tmp%10#0"
      ]
    },
    "146": {
      "op": "assert",
      "defined_out": [
        "x#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "x#0"
      ]
    },
    "147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "y#0",
        "x#0",
        "0"
      ]
    },
    "148": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%11#0"
      ]
    },
    "149": {
      "op": "assert",
      "stack_out": [
        "y#0"
      ]
    },
    "150": {
      "op": "frame_dig -2",
      "stack_out": [
        "y#0",
        "num1#0 (copy)"
      ]
    },
    "152": {
      "op": "frame_dig -1",
      "stack_out": [
        "y#0",
        "num1#0 (copy)",
        "num2#0 (copy)"
      ]
    },
    "154": {
      "op": "+",
      "defined_out": [
        "tmp%12#0",
        "y#0"
      ],
      "stack_out": [
        "y#0",
        "tmp%12#0"
      ]
    },
    "155": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "156": {
      "op": "assert",
      "stack_out": []
    },
    "157": {
      "retsub": true,
      "op": "retsub"
    },
    "158": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "params": {},
      "block": "test_nested_slicing_block@0",
      "stack_in": [],
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "160": {
      "op": "dup",
      "stack_out": [
        "4",
        "4"
      ]
    },
    "161": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "assert",
      "stack_out": []
    },
    "163": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "164": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "166": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "5"
      ]
    },
    "168": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "5",
        "5"
      ]
    },
    "169": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "170": {
      "op": "&&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "171": {
      "op": "assert",
      "stack_out": []
    },
    "172": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "\"a\""
      ]
    },
    "175": {
      "op": "dup",
      "stack_out": [
        "\"a\"",
        "\"a\""
      ]
    },
    "176": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "177": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"b\""
      ]
    },
    "180": {
      "op": "dup",
      "stack_out": [
        "tmp%4#0",
        "\"b\"",
        "\"b\""
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "182": {
      "op": "&&",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "183": {
      "op": "assert",
      "stack_out": []
    },
    "184": {
      "retsub": true,
      "op": "retsub"
    },
    "185": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "params": {
        "one#0": "uint64",
        "reassign#0": "uint64"
      },
      "block": "test_nested_singles",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "188": {
      "block": "test_nested_singles_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0"
      ]
    },
    "189": {
      "op": "frame_dig -2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0"
      ]
    },
    "191": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0"
      ]
    },
    "192": {
      "op": "intc_2 // 2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ]
    },
    "193": {
      "op": "swap",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "194": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "195": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "196": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0"
      ]
    },
    "199": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "0",
        "0"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%1#0"
      ]
    },
    "201": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "202": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "203": {
      "op": "intc_1 // 1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "1"
      ]
    },
    "204": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%2#0"
      ]
    },
    "205": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "206": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)"
      ]
    },
    "207": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "s.1.0#0 (copy)",
        "one#0 (copy)"
      ]
    },
    "209": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%3#0"
      ]
    },
    "210": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "211": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "212": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "213": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%4#0"
      ]
    },
    "214": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0"
      ]
    },
    "215": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2"
      ]
    },
    "216": {
      "op": "dup",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "2",
        "2"
      ]
    },
    "217": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "s.1.0#0",
        "tmp%5#0"
      ]
    },
    "218": {
      "op": "assert",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "219": {
      "op": "frame_dig -1",
      "defined_out": [
        "reassign#0 (copy)",
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "reassign#0 (copy)"
      ]
    },
    "221": {
      "op": "bz test_nested_singles_after_if_else@2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "224": {
      "block": "test_nested_singles_if_body@1",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.0.0#0"
      ]
    },
    "226": {
      "op": "frame_bury 0",
      "defined_out": [
        "s.0.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "228": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "230": {
      "op": "frame_bury 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "232": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.2.0#0"
      ]
    },
    "234": {
      "op": "frame_bury 2",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "236": {
      "block": "test_nested_singles_after_if_else@2",
      "stack_in": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0"
      ]
    },
    "237": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "3"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3"
      ]
    },
    "239": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "3",
        "reassign#0 (copy)"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "0",
        "3",
        "reassign#0 (copy)"
      ]
    },
    "241": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "select%0#0"
      ]
    },
    "242": {
      "op": "frame_dig 0",
      "defined_out": [
        "s.0.0#0",
        "select%0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "select%0#0",
        "s.0.0#0"
      ]
    },
    "244": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%6#0"
      ]
    },
    "245": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "246": {
      "op": "frame_dig 2",
      "defined_out": [
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0"
      ]
    },
    "248": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2"
      ]
    },
    "249": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "2",
        "5",
        "s.0.0#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5"
      ]
    },
    "251": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "253": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "select%1#0",
        "tmp#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp#0",
        "select%1#0"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%7#0"
      ]
    },
    "255": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "256": {
      "op": "frame_dig 3",
      "defined_out": [
        "s.0.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "258": {
      "op": "frame_dig -2",
      "defined_out": [
        "one#0 (copy)",
        "s.0.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "t.0#0",
        "one#0 (copy)"
      ]
    },
    "260": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "t.0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%8#0"
      ]
    },
    "261": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "262": {
      "op": "frame_dig 1",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "264": {
      "op": "dup",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s1#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "265": {
      "op": "frame_dig -2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "one#0 (copy)"
      ]
    },
    "267": {
      "op": "+",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0"
      ]
    },
    "268": {
      "op": "intc_2 // 2",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2"
      ]
    },
    "269": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5"
      ]
    },
    "271": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "2",
        "5",
        "reassign#0 (copy)"
      ]
    },
    "273": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s1#0",
        "select%2#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "s1#0",
        "select%2#0"
      ]
    },
    "274": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "tmp%9#0"
      ]
    },
    "275": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0"
      ]
    },
    "276": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1"
      ]
    },
    "277": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1",
        "4",
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4"
      ]
    },
    "279": {
      "op": "frame_dig -1",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "1",
        "4",
        "reassign#0 (copy)"
      ]
    },
    "281": {
      "op": "select",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "select%3#0",
        "t.0#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "s.1.0#0",
        "select%3#0"
      ]
    },
    "282": {
      "op": "==",
      "defined_out": [
        "s.0.0#0",
        "s.1.0#0",
        "t.0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0",
        "tmp%10#0"
      ]
    },
    "283": {
      "op": "assert",
      "stack_out": [
        "s.0.0#0",
        "s.1.0#0",
        "s.2.0#0",
        "t.0#0"
      ]
    },
    "284": {
      "retsub": true,
      "op": "retsub"
    },
    "285": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "params": {},
      "block": "test_nested_mutation_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "286": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x",
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000000"
      ]
    },
    "296": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "297": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x0001"
      ]
    },
    "301": {
      "op": "swap",
      "stack_out": [
        "0x0001",
        "result%0#0"
      ]
    },
    "302": {
      "op": "concat",
      "defined_out": [
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "303": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "306": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x"
      ]
    },
    "307": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "317": {
      "op": "concat",
      "defined_out": [
        "array%encoded%0#1",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1"
      ]
    },
    "318": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "array%encoded%0#1",
        "0x"
      ]
    },
    "319": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%0#0",
        "0x",
        "array%encoded%0#1"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "encoded%0#0"
      ]
    },
    "321": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "322": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "323": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "324": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "325": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "326": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "327": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "330": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "331": {
      "op": "concat",
      "stack_out": [
        "x.0.0#0"
      ]
    },
    "332": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "x.0.0#0"
      ],
      "stack_out": [
        "x.0.0#0",
        "0"
      ]
    },
    "333": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "335": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "336": {
      "op": "assert",
      "stack_out": []
    },
    "337": {
      "retsub": true,
      "op": "retsub"
    },
    "338": {
      "subroutine": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "params": {},
      "block": "test_nested_iteration",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "341": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "a#0"
      ]
    },
    "342": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "loop_counter%1#0"
      ]
    },
    "343": {
      "block": "test_nested_iteration_block@0",
      "stack_in": [
        "a#0",
        "loop_counter%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0"
      ]
    },
    "344": {
      "op": "dup",
      "defined_out": [
        "loop_counter%0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "345": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "346": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "347": {
      "block": "test_nested_iteration_for_body@1",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "a#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0",
        "a#0"
      ]
    },
    "349": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%0#0"
      ]
    },
    "350": {
      "op": "frame_dig 2",
      "defined_out": [
        "a#0",
        "tmp%0#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%0#0",
        "total#0"
      ]
    },
    "352": {
      "op": "+",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "353": {
      "op": "frame_bury 2",
      "defined_out": [
        "a#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "355": {
      "block": "test_nested_iteration_for_footer@2",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "357": {
      "op": "switch test_nested_iteration_for_header_1@3 test_nested_iteration_for_header_2@4 test_nested_iteration_for_header_3@5",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "365": {
      "block": "test_nested_iteration_after_for@6",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "366": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "369": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "371": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "372": {
      "block": "test_nested_iteration_for_body@7",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0",
        "a#0"
      ]
    },
    "374": {
      "op": "+",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%1#0"
      ]
    },
    "375": {
      "op": "frame_dig 2",
      "defined_out": [
        "a#0",
        "tmp%1#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%1#0",
        "total#0"
      ]
    },
    "377": {
      "op": "+",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "378": {
      "op": "frame_bury 2",
      "defined_out": [
        "a#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "380": {
      "block": "test_nested_iteration_for_footer@8",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "382": {
      "op": "switch test_nested_iteration_for_header_1@9 test_nested_iteration_for_header_2@10 test_nested_iteration_for_header_3@11",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "390": {
      "block": "test_nested_iteration_after_for@12",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0"
      ]
    },
    "392": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "total#0",
        "8"
      ]
    },
    "393": {
      "op": "/",
      "defined_out": [
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%2#0"
      ]
    },
    "394": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%2#0",
        "3"
      ]
    },
    "396": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "tmp%3#0"
      ]
    },
    "397": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "398": {
      "retsub": true,
      "op": "retsub"
    },
    "399": {
      "block": "test_nested_iteration_for_header_3@11",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "401": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "403": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "404": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "406": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "407": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "410": {
      "block": "test_nested_iteration_for_header_2@10",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "411": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "413": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "414": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "416": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "417": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "420": {
      "block": "test_nested_iteration_for_header_1@9",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%1#0"
      ]
    },
    "421": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "423": {
      "op": "intc_2 // 2",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "a#0"
      ]
    },
    "424": {
      "op": "frame_bury 0",
      "defined_out": [
        "a#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "426": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a#0",
        "b#0",
        "loop_counter%1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "b#0"
      ]
    },
    "427": {
      "op": "b test_nested_iteration_for_body@7"
    },
    "430": {
      "block": "test_nested_iteration_for_header_3@5",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "432": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "434": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "435": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "437": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "438": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "441": {
      "block": "test_nested_iteration_for_header_2@4",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "442": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "444": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "445": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "447": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "448": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "451": {
      "block": "test_nested_iteration_for_header_1@3",
      "stack_in": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "loop_counter%0#0"
      ]
    },
    "452": {
      "op": "frame_bury 3",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "454": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.0#0"
      ]
    },
    "455": {
      "op": "frame_bury 4",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0"
      ]
    },
    "457": {
      "op": "intc_1 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ],
      "stack_out": [
        "a#0",
        "loop_counter%1#0",
        "total#0",
        "loop_counter%0#0",
        "t.0#0",
        "t.1#0"
      ]
    },
    "458": {
      "op": "b test_nested_iteration_for_body@1"
    },
    "461": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "463": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "464": {
      "op": "app_global_put",
      "stack_out": []
    },
    "465": {
      "retsub": true,
      "op": "retsub"
    },
    "466": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "params": {
        "pwl.parent.foo#0": "uint64",
        "pwl.parent.foo_arc#0": "bytes",
        "pwl.parent.child.a#0": "uint64",
        "pwl.parent.child.b#0": "bytes",
        "pwl.parent.child.c#0": "bytes",
        "pwl.children#0": "bytes"
      },
      "block": "store_tuple",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "469": {
      "block": "store_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "pwl.parent.foo#0 (copy)"
      ],
      "stack_out": [
        "pwl.parent.foo#0 (copy)"
      ]
    },
    "471": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "472": {
      "op": "frame_dig -4",
      "defined_out": [
        "pwl.parent.child.a#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "pwl.parent.child.a#0 (copy)"
      ]
    },
    "474": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "475": {
      "op": "frame_dig -3",
      "defined_out": [
        "pwl.parent.child.b#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "477": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "478": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "479": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "482": {
      "op": "frame_dig -3",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "pwl.parent.child.b#0 (copy)"
      ]
    },
    "484": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "485": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "486": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_value%0#0",
        "pwl.parent.child.c#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "488": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length%1#0"
      ]
    },
    "489": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "as_bytes%1#0"
      ]
    },
    "490": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0"
      ]
    },
    "493": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0",
        "pwl.parent.child.c#0 (copy)"
      ]
    },
    "495": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "encoded_value%1#0"
      ]
    },
    "496": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "498": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "0x"
      ]
    },
    "499": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%1#0"
      ]
    },
    "500": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "501": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "12"
      ]
    },
    "503": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%2#0"
      ]
    },
    "504": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "507": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "508": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "510": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "511": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "12"
      ]
    },
    "513": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "514": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%3#0"
      ]
    },
    "515": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "518": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "519": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ]
    },
    "520": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "521": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ]
    },
    "522": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "523": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0",
        "0x"
      ]
    },
    "524": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "527": {
      "op": "frame_dig -5",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "pwl.parent.foo_arc#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "pwl.parent.foo_arc#0 (copy)"
      ]
    },
    "529": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "530": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "18"
      ]
    },
    "532": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "as_bytes%4#0"
      ]
    },
    "533": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ]
    },
    "536": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "539": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "4"
      ]
    },
    "541": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "as_bytes%5#0"
      ]
    },
    "542": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ]
    },
    "545": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0",
        "0x"
      ]
    },
    "546": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x",
        "offset_as_uint16%3#0"
      ]
    },
    "547": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "548": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "549": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)"
      ]
    },
    "550": {
      "op": "len",
      "defined_out": [
        "data_length%3#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0"
      ]
    },
    "551": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0",
        "4"
      ]
    },
    "553": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "current_tail_offset%6#0"
      ]
    },
    "554": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "as_bytes%6#0"
      ]
    },
    "555": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0"
      ]
    },
    "558": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "560": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ]
    },
    "561": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "562": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "563": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0"
      ]
    },
    "564": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "pwl.children#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "pwl.children#0 (copy)"
      ]
    },
    "566": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0"
      ]
    },
    "567": {
      "op": "bytec 6 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0",
        "\"pwl\""
      ]
    },
    "569": {
      "op": "swap",
      "stack_out": [
        "\"pwl\"",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "570": {
      "op": "app_global_put",
      "stack_out": []
    },
    "571": {
      "retsub": true,
      "op": "retsub"
    },
    "572": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "params": {},
      "block": "load_tuple",
      "stack_in": [],
      "op": "proto 0 6"
    },
    "575": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0.children#0"
      ]
    },
    "576": {
      "op": "dupn 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0"
      ]
    },
    "578": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0"
      ]
    },
    "579": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0"
      ]
    },
    "580": {
      "block": "load_tuple_block@0",
      "stack_in": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "0"
      ]
    },
    "581": {
      "op": "bytec 6 // \"pwl\"",
      "defined_out": [
        "\"pwl\"",
        "0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "0",
        "\"pwl\""
      ]
    },
    "583": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "584": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_exists%0#0 (copy)"
      ]
    },
    "585": {
      "op": "cover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "587": {
      "op": "cover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "589": {
      "op": "swap",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "590": {
      "op": "bz load_tuple_ternary_false@2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "593": {
      "block": "load_tuple_ternary_true@1",
      "stack_in": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "595": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "596": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "597": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "598": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ]
    },
    "599": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "600": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "601": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "item_end_offset%0#0"
      ]
    },
    "602": {
      "op": "dig 1",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "item_end_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "604": {
      "op": "uncover 3",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item_end_offset%0#0",
        "maybe_value%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "606": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "608": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "609": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "610": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "611": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%0#0",
        "item0%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "612": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%1#0"
      ]
    },
    "613": {
      "op": "btoi",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%2#0"
      ]
    },
    "614": {
      "op": "cover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "616": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "617": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8"
      ]
    },
    "618": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "619": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item0%0#0",
        "item1%0#0"
      ]
    },
    "620": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0"
      ]
    },
    "621": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "622": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%0#0",
        "item0%0#0 (copy)",
        "item0%2#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "16"
      ]
    },
    "624": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "625": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0"
      ]
    },
    "626": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "627": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "628": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "item0%0#0"
      ]
    },
    "629": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "631": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "633": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0"
      ]
    },
    "634": {
      "op": "dup",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0"
      ]
    },
    "636": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "637": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item0%3#0",
        "item1%0#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item0%3#0"
      ]
    },
    "638": {
      "op": "btoi",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item2%0#0",
        "item0%4#0"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0"
      ]
    },
    "640": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "641": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "8"
      ]
    },
    "642": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_start_offset%2#0"
      ]
    },
    "643": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0"
      ]
    },
    "644": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "645": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "647": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0"
      ]
    },
    "648": {
      "op": "dig 1",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)"
      ]
    },
    "650": {
      "op": "uncover 3",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "652": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "654": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%1#0"
      ]
    },
    "655": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%2#0"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "659": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "660": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "662": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "663": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0"
      ]
    },
    "664": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "665": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item_end_offset%3#0"
      ]
    },
    "666": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "item2%0#0"
      ]
    },
    "667": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%3#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "669": {
      "op": "uncover 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "671": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0"
      ]
    },
    "672": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0"
      ]
    },
    "675": {
      "op": "dig 4",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "677": {
      "op": "intc_2 // 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0 (copy)",
        "2"
      ]
    },
    "678": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0"
      ]
    },
    "679": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0"
      ]
    },
    "680": {
      "op": "dig 5",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "682": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "item_end_offset%4#0"
      ]
    },
    "683": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0"
      ]
    },
    "684": {
      "op": "uncover 6",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "maybe_value%0#0"
      ]
    },
    "686": {
      "op": "uncover 3",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "maybe_value%0#0",
        "item_start_offset%4#0"
      ]
    },
    "688": {
      "op": "uncover 3",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "maybe_value%0#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "690": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item1%3#0",
        "item2%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "691": {
      "op": "uncover 5",
      "defined_out": [
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item1%3#0",
        "item2%2#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "ternary_result%0.parent.foo#0"
      ]
    },
    "693": {
      "op": "frame_bury 4",
      "defined_out": [
        "item0%4#0",
        "item1%2#0",
        "item1%3#0",
        "item2%2#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "695": {
      "op": "uncover 3",
      "defined_out": [
        "item1%2#0",
        "item1%3#0",
        "item2%2#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "ternary_result%0.parent.child.a#0"
      ]
    },
    "697": {
      "op": "frame_bury 3",
      "defined_out": [
        "item1%2#0",
        "item1%3#0",
        "item2%2#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "699": {
      "op": "uncover 2",
      "defined_out": [
        "item1%3#0",
        "item2%2#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "item2%2#0",
        "item1%3#0",
        "ternary_result%0.parent.child.b#0"
      ]
    },
    "701": {
      "op": "frame_bury 1",
      "defined_out": [
        "item1%3#0",
        "item2%2#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "703": {
      "op": "swap",
      "defined_out": [
        "item1%3#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "item1%3#0",
        "ternary_result%0.parent.child.c#0"
      ]
    },
    "704": {
      "op": "frame_bury 2",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.children#0"
      ]
    },
    "706": {
      "op": "frame_bury 0",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "708": {
      "block": "load_tuple_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "maybe_exists%0#0"
      ]
    },
    "710": {
      "error": "check self.pwl exists",
      "op": "assert // check self.pwl exists",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "711": {
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.parent.foo#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.foo#0"
      ]
    },
    "713": {
      "op": "swap",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "714": {
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.child.a#0"
      ]
    },
    "716": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0"
      ]
    },
    "718": {
      "op": "frame_dig 2",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0"
      ]
    },
    "720": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.children#0"
      ]
    },
    "722": {
      "op": "frame_bury 5"
    },
    "724": {
      "op": "frame_bury 4"
    },
    "726": {
      "op": "frame_bury 3"
    },
    "728": {
      "op": "frame_bury 2"
    },
    "730": {
      "op": "frame_bury 1"
    },
    "732": {
      "op": "frame_bury 0"
    },
    "734": {
      "retsub": true,
      "op": "retsub"
    },
    "735": {
      "block": "load_tuple_ternary_false@2",
      "stack_in": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "ternary_result%0.parent.foo#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo#0"
      ]
    },
    "736": {
      "op": "frame_bury 4",
      "defined_out": [
        "ternary_result%0.parent.foo#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "738": {
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "739": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.child.a#0"
      ]
    },
    "740": {
      "op": "frame_bury 3",
      "defined_out": [
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "742": {
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.child.b#0"
      ]
    },
    "743": {
      "op": "frame_bury 1",
      "defined_out": [
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "745": {
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.parent.child.c#0"
      ]
    },
    "746": {
      "op": "frame_bury 2",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "748": {
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.foo#0",
        "ternary_result%0.parent.foo_arc#0"
      ],
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0",
        "ternary_result%0.children#0"
      ]
    },
    "749": {
      "op": "frame_bury 0",
      "stack_out": [
        "ternary_result%0.children#0",
        "ternary_result%0.parent.child.b#0",
        "ternary_result%0.parent.child.c#0",
        "ternary_result%0.parent.child.a#0",
        "ternary_result%0.parent.foo#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.parent.foo_arc#0"
      ]
    },
    "751": {
      "op": "b load_tuple_ternary_merge@3"
    },
    "754": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "store_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "757": {
      "block": "store_tuple_in_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)"
      ]
    },
    "759": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "key.b#0 (copy)"
      ],
      "stack_out": [
        "key.b#0 (copy)",
        "1"
      ]
    },
    "760": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "761": {
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "key.a#0 (copy)"
      ]
    },
    "763": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "764": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "766": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "767": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "768": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "769": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "770": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "771": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "772": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "773": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "775": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "776": {
      "op": "concat",
      "defined_out": [
        "box_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_key%0#0"
      ]
    },
    "777": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "box_key%0#0",
        "key.a#0 (copy)"
      ]
    },
    "779": {
      "op": "itob",
      "defined_out": [
        "box_key%0#0",
        "tmp%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "box_key%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "780": {
      "op": "uncover 2",
      "stack_out": [
        "box_key%0#0",
        "val_as_bytes%2#0",
        "tmp%0#0"
      ]
    },
    "782": {
      "op": "itob",
      "defined_out": [
        "box_key%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "box_key%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "783": {
      "op": "swap",
      "stack_out": [
        "box_key%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "784": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "box_key%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "785": {
      "op": "swap",
      "stack_out": [
        "box_key%0#0",
        "val_as_bytes%3#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "box_key%0#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "box_key%0#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "787": {
      "op": "swap",
      "stack_out": [
        "box_key%0#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "788": {
      "op": "concat",
      "defined_out": [
        "box_key%0#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "box_key%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "789": {
      "op": "box_put",
      "stack_out": []
    },
    "790": {
      "retsub": true,
      "op": "retsub"
    },
    "791": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "is_tuple_in_box",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "794": {
      "block": "is_tuple_in_box_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "key.a#0 (copy)"
      ]
    },
    "796": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "797": {
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "799": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "800": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "801": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "802": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "803": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "804": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "805": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "806": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "808": {
      "op": "swap",
      "stack_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "809": {
      "op": "concat",
      "defined_out": [
        "box_key%0#0"
      ],
      "stack_out": [
        "box_key%0#0"
      ]
    },
    "810": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "811": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "813": {
      "retsub": true,
      "op": "retsub"
    },
    "814": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "params": {
        "key.a#0": "uint64",
        "key.b#0": "uint64"
      },
      "block": "load_tuple_from_box",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "817": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "ternary_result%0.a#0"
      ]
    },
    "818": {
      "block": "load_tuple_from_box_block@0",
      "stack_in": [
        "ternary_result%0.a#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "key.a#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "key.a#0 (copy)"
      ]
    },
    "820": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0"
      ]
    },
    "821": {
      "op": "frame_dig -1",
      "defined_out": [
        "key.b#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0",
        "key.b#0 (copy)"
      ]
    },
    "823": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "824": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "825": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "826": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "827": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "828": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "829": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "830": {
      "op": "bytec 5 // \"box\"",
      "defined_out": [
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "encoded_tuple_buffer%2#0",
        "\"box\""
      ]
    },
    "832": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "\"box\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "833": {
      "op": "concat",
      "defined_out": [
        "box_key%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "box_key%0#0"
      ]
    },
    "834": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "835": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "maybe_exists%0#0 (copy)"
      ]
    },
    "836": {
      "op": "cover 2",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "838": {
      "op": "cover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "840": {
      "op": "swap",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "841": {
      "op": "bz load_tuple_from_box_ternary_false@2",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "844": {
      "block": "load_tuple_from_box_ternary_true@1",
      "stack_in": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0"
      ]
    },
    "846": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "847": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "848": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "849": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%0#0"
      ]
    },
    "850": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0",
        "item0%1#0"
      ]
    },
    "851": {
      "op": "swap",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0"
      ]
    },
    "852": {
      "op": "intc_3 // 8",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8"
      ]
    },
    "853": {
      "op": "dup",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "maybe_value%0#0",
        "8",
        "8"
      ]
    },
    "854": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "855": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item0%1#0",
        "item1%1#0"
      ]
    },
    "856": {
      "op": "swap",
      "defined_out": [
        "item1%1#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "item1%1#0",
        "ternary_result%0.a#0"
      ]
    },
    "857": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "859": {
      "block": "load_tuple_from_box_ternary_merge@3",
      "stack_in": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0",
        "maybe_exists%0#0"
      ]
    },
    "861": {
      "error": "check self.box entry exists",
      "op": "assert // check self.box entry exists",
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "862": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0",
        "ternary_result%0.a#0"
      ]
    },
    "864": {
      "op": "swap",
      "defined_out": [
        "maybe_exists%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ]
    },
    "865": {
      "op": "frame_bury 1"
    },
    "867": {
      "op": "frame_bury 0"
    },
    "869": {
      "retsub": true,
      "op": "retsub"
    },
    "870": {
      "block": "load_tuple_from_box_ternary_false@2",
      "stack_in": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.a#0"
      ]
    },
    "871": {
      "op": "frame_bury 0",
      "defined_out": [
        "ternary_result%0.a#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "873": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "ternary_result%0.a#0",
        "ternary_result%0.b#0"
      ],
      "stack_out": [
        "ternary_result%0.a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "ternary_result%0.b#0"
      ]
    },
    "874": {
      "op": "b load_tuple_from_box_ternary_merge@3"
    },
    "877": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "params": {},
      "block": "run_tests_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"Hi\"",
      "defined_out": [
        "\"Hi\""
      ],
      "stack_out": [
        "\"Hi\""
      ]
    },
    "878": {
      "op": "bytec_3 // \"There\"",
      "defined_out": [
        "\"Hi\"",
        "\"There\""
      ],
      "stack_out": [
        "\"Hi\"",
        "\"There\""
      ]
    },
    "879": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_swap",
      "op": "callsub test_swap",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "882": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "883": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "\"There\""
      ]
    },
    "884": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "885": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "886": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%1#0",
        "\"Hi\""
      ]
    },
    "887": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "888": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "889": {
      "op": "assert",
      "stack_out": []
    },
    "890": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "\"There\""
      ]
    },
    "891": {
      "op": "dup",
      "stack_out": [
        "\"There\"",
        "\"There\""
      ]
    },
    "892": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "893": {
      "op": "assert",
      "stack_out": []
    },
    "894": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "\"Hi\""
      ]
    },
    "895": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"Hi\"",
        "0"
      ],
      "stack_out": [
        "\"Hi\"",
        "0"
      ]
    },
    "896": {
      "op": "intc_2 // 2",
      "defined_out": [
        "\"Hi\"",
        "0",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2"
      ]
    },
    "897": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"Hi\"",
        "0",
        "1",
        "2"
      ],
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1"
      ]
    },
    "898": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\""
      ]
    },
    "899": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\""
      ]
    },
    "900": {
      "op": "dup",
      "stack_out": [
        "\"Hi\"",
        "0",
        "2",
        "1",
        "\"Hi\"",
        "\"There\"",
        "\"There\""
      ]
    },
    "901": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_rearrange",
      "op": "callsub test_rearrange",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ]
    },
    "904": {
      "op": "cover 4",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0"
      ]
    },
    "906": {
      "op": "cover 3",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0"
      ]
    },
    "908": {
      "op": "cover 2",
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "910": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "tuple_assignment%1#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "tuple_assignment%2#0",
        "tuple_assignment%1#0",
        "a#0"
      ]
    },
    "911": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "tuple_assignment%3#0",
        "a#0",
        "tuple_assignment%2#0",
        "b#0"
      ]
    },
    "913": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "tuple_assignment%4#0",
        "b#0",
        "tuple_assignment%3#0",
        "a#0",
        "c#0"
      ]
    },
    "915": {
      "op": "cover 4",
      "stack_out": [
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "tuple_assignment%3#0",
        "a#0"
      ]
    },
    "917": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "a#0",
        "d#0"
      ]
    },
    "918": {
      "op": "cover 4",
      "stack_out": [
        "d#0",
        "c#0",
        "tuple_assignment%4#0",
        "b#0",
        "a#0"
      ]
    },
    "920": {
      "op": "uncover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "e#0"
      ],
      "stack_out": [
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "e#0"
      ]
    },
    "922": {
      "op": "cover 4",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "924": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "a#0",
        "\"Hi\""
      ]
    },
    "925": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "926": {
      "op": "swap",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "b#0"
      ]
    },
    "927": {
      "op": "intc_0 // 0",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "b#0",
        "0"
      ]
    },
    "928": {
      "op": "==",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "929": {
      "op": "&&",
      "defined_out": [
        "c#0",
        "d#0",
        "e#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "tmp%6#0"
      ]
    },
    "930": {
      "op": "assert",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0"
      ]
    },
    "931": {
      "op": "intc_2 // 2",
      "stack_out": [
        "e#0",
        "d#0",
        "c#0",
        "2"
      ]
    },
    "932": {
      "op": "==",
      "defined_out": [
        "d#0",
        "e#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "e#0",
        "d#0",
        "tmp%7#0"
      ]
    },
    "933": {
      "op": "swap",
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "d#0"
      ]
    },
    "934": {
      "op": "intc_1 // 1",
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "d#0",
        "1"
      ]
    },
    "935": {
      "op": "==",
      "defined_out": [
        "e#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "936": {
      "op": "&&",
      "defined_out": [
        "e#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "e#0",
        "tmp%9#0"
      ]
    },
    "937": {
      "op": "assert",
      "stack_out": [
        "e#0"
      ]
    },
    "938": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "e#0",
        "\"There\""
      ]
    },
    "939": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "940": {
      "op": "assert",
      "stack_out": []
    },
    "941": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "942": {
      "op": "intc_2 // 2",
      "stack_out": [
        "1",
        "2"
      ]
    },
    "943": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_intrinsics",
      "op": "callsub test_intrinsics",
      "stack_out": []
    },
    "946": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_slicing",
      "op": "callsub test_nested_slicing"
    },
    "949": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "950": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "951": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "954": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "955": {
      "op": "intc_0 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "956": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_singles",
      "op": "callsub test_nested_singles",
      "stack_out": []
    },
    "959": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_mutation",
      "op": "callsub test_nested_mutation"
    },
    "962": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "963": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "964": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "965": {
      "op": "bytec_2 // \"Hi\"",
      "stack_out": [
        "tmp%11#0",
        "\"Hi\""
      ]
    },
    "966": {
      "op": "dup",
      "stack_out": [
        "tmp%11#0",
        "\"Hi\"",
        "\"Hi\""
      ]
    },
    "967": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "968": {
      "op": "bytec_3 // \"There\"",
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "\"There\""
      ]
    },
    "969": {
      "op": "dup",
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "\"There\"",
        "\"There\""
      ]
    },
    "970": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "971": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "972": {
      "op": "&&",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "973": {
      "op": "assert",
      "stack_out": []
    },
    "974": {
      "callsub": "test_cases.tuple_support.nested_tuples.test_nested_iteration",
      "op": "callsub test_nested_iteration"
    },
    "977": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "op": "callsub test_single_evaluation_nested"
    },
    "980": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "981": {
      "retsub": true,
      "op": "retsub"
    },
    "982": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "params": {
        "args.0#0": "bytes",
        "args.1.0#0": "bytes",
        "args.1.1.0#0": "uint64"
      },
      "block": "nested_tuple_params",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "985": {
      "block": "nested_tuple_params_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "s#0"
      ],
      "stack_out": [
        "s#0"
      ]
    },
    "987": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0",
        "s#0"
      ],
      "stack_out": [
        "s#0",
        "b#0"
      ]
    },
    "989": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "s#0",
        "b#0",
        "u#0"
      ]
    },
    "991": {
      "op": "swap",
      "stack_out": [
        "s#0",
        "u#0",
        "b#0"
      ]
    },
    "992": {
      "op": "uncover 2",
      "stack_out": [
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "994": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "s#0",
        "u#0"
      ]
    },
    "996": {
      "retsub": true,
      "op": "retsub"
    },
    "997": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "params": {
        "args.a#0": "uint64",
        "args.b#0": "bytes",
        "args.c#0": "bytes"
      },
      "block": "named_tuple",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "1000": {
      "block": "named_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1002": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "1004": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1006": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "1008": {
      "op": "uncover 2",
      "stack_out": [
        "c#0",
        "a#0",
        "b#0"
      ]
    },
    "1010": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1012": {
      "retsub": true,
      "op": "retsub"
    },
    "1013": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "params": {
        "args.foo#0": "uint64",
        "args.foo_arc#0": "bytes",
        "args.child.a#0": "uint64",
        "args.child.b#0": "bytes",
        "args.child.c#0": "bytes"
      },
      "block": "nested_named_tuple_params",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "1016": {
      "block": "nested_named_tuple_params_block@0",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "foo#0"
      ],
      "stack_out": [
        "foo#0"
      ]
    },
    "1018": {
      "op": "frame_dig -4",
      "defined_out": [
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0"
      ]
    },
    "1020": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "1022": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "1024": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ],
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1026": {
      "op": "uncover 4",
      "stack_out": [
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0",
        "foo#0"
      ]
    },
    "1028": {
      "op": "uncover 4",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0"
      ]
    },
    "1030": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0"
      ]
    },
    "1032": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0"
      ]
    },
    "1034": {
      "op": "uncover 4",
      "stack_out": [
        "foo#0",
        "foo_arc#0",
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "1036": {
      "retsub": true,
      "op": "retsub"
    },
    "1037": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "params": {},
      "block": "build_nested_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1038": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "1040": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1041": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1042": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1043": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1044": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"build_nested_call_count\""
      ]
    },
    "1046": {
      "op": "swap",
      "stack_out": [
        "\"build_nested_call_count\"",
        "new_state_value%0#0"
      ]
    },
    "1047": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1048": {
      "op": "bytec 7 // \"hi\"",
      "defined_out": [
        "\"hi\""
      ],
      "stack_out": [
        "\"hi\""
      ]
    },
    "1050": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"hi\"",
        "1"
      ]
    },
    "1051": {
      "op": "pushbytes 0x686d6d6d",
      "defined_out": [
        "\"hi\"",
        "0x686d6d6d",
        "1"
      ],
      "stack_out": [
        "\"hi\"",
        "1",
        "0x686d6d6d"
      ]
    },
    "1057": {
      "retsub": true,
      "op": "retsub"
    },
    "1058": {
      "subroutine": "test_cases.tuple_support.nested_tuples.NestedTuples.test_single_evaluation_nested",
      "params": {},
      "block": "test_single_evaluation_nested",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1061": {
      "block": "test_single_evaluation_nested_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\""
      ],
      "stack_out": [
        "\"build_nested_call_count\""
      ]
    },
    "1063": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "\"build_nested_call_count\"",
        "0"
      ]
    },
    "1064": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1065": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ]
    },
    "1068": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "1070": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "1071": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1072": {
      "op": "cover 3",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "1074": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%1#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%0#0"
      ]
    },
    "1075": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0"
      ]
    },
    "1076": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%1#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1078": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%1#0"
      ]
    },
    "1080": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1081": {
      "op": "&&",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1082": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%2#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1084": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%2#0"
      ]
    },
    "1086": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1087": {
      "op": "||",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1088": {
      "op": "bz test_single_evaluation_nested_ternary_false@2",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1091": {
      "block": "test_single_evaluation_nested_ternary_true@1",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ]
    },
    "1093": {
      "block": "test_single_evaluation_nested_ternary_merge@3",
      "stack_in": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ],
      "op": "bytec 7 // \"hi\"",
      "defined_out": [
        "\"hi\"",
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "\"hi\""
      ]
    },
    "1095": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1096": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1097": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0"
      ]
    },
    "1098": {
      "op": "bytec 4 // \"build_nested_call_count\"",
      "defined_out": [
        "\"build_nested_call_count\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "0",
        "\"build_nested_call_count\""
      ]
    },
    "1100": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1101": {
      "error": "check self.build_nested_call_count exists",
      "op": "assert // check self.build_nested_call_count exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1102": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1103": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1104": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1105": {
      "retsub": true,
      "op": "retsub"
    },
    "1106": {
      "block": "test_single_evaluation_nested_ternary_false@2",
      "stack_in": [
        "awst_tmp%0#0"
      ],
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.build_nested",
      "op": "callsub build_nested",
      "defined_out": [
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0",
        "ternary_result%0.0.1#1",
        "ternary_result%0.1#1"
      ]
    },
    "1109": {
      "op": "popn 2",
      "defined_out": [
        "ternary_result%0.0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "ternary_result%0.0.0#0"
      ]
    },
    "1111": {
      "op": "b test_single_evaluation_nested_ternary_merge@3"
    },
    "1114": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1116": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "1117": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1118": {
      "op": "bz approval_program_bare_routing@14",
      "stack_out": []
    },
    "1121": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1124": {
      "op": "pushbytes 0x383e1e8b // method \"store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void\"",
      "defined_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)"
      ]
    },
    "1130": {
      "op": "pushbytes 0x68cbedd7 // method \"load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[])\"",
      "defined_out": [
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))"
      ]
    },
    "1136": {
      "op": "pushbytes 0x2263fcf1 // method \"store_tuple_in_box((uint64,uint64))void\"",
      "defined_out": [
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)"
      ]
    },
    "1142": {
      "op": "pushbytes 0xbfc37339 // method \"is_tuple_in_box((uint64,uint64))bool\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)"
      ]
    },
    "1148": {
      "op": "pushbytes 0xc660beaa // method \"load_tuple_from_box((uint64,uint64))(uint64,uint64)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))"
      ]
    },
    "1154": {
      "op": "pushbytes 0x9e5a3ba7 // method \"run_tests()bool\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(run_tests()bool)"
      ]
    },
    "1160": {
      "op": "pushbytes 0xcea0521b // method \"nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))"
      ]
    },
    "1166": {
      "op": "pushbytes 0x373f5b24 // method \"named_tuple((uint64,byte[],string))(uint64,byte[],string)\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))"
      ]
    },
    "1172": {
      "op": "pushbytes 0xec593096 // method \"nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string))\"",
      "defined_out": [
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(run_tests()bool)",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))"
      ]
    },
    "1178": {
      "op": "uncover 9",
      "stack_out": [
        "Method(store_tuple(((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))void)",
        "Method(load_tuple()((uint64,uint64,(uint64,byte[],string)),(uint64,byte[],string)[]))",
        "Method(store_tuple_in_box((uint64,uint64))void)",
        "Method(is_tuple_in_box((uint64,uint64))bool)",
        "Method(load_tuple_from_box((uint64,uint64))(uint64,uint64))",
        "Method(run_tests()bool)",
        "Method(nested_tuple_params((string,(byte[],(uint64))))(byte[],(string,uint64)))",
        "Method(named_tuple((uint64,byte[],string))(uint64,byte[],string))",
        "Method(nested_named_tuple_params((uint64,uint64,(uint64,byte[],string)))(uint64,uint64,(uint64,byte[],string)))",
        "tmp%2#0"
      ]
    },
    "1180": {
      "op": "match approval_program_store_tuple_route@3 approval_program_load_tuple_route@4 approval_program_store_tuple_in_box_route@5 approval_program_is_tuple_in_box_route@6 approval_program_load_tuple_from_box_route@7 approval_program_run_tests_route@8 approval_program_nested_tuple_params_route@9 approval_program_named_tuple_route@10 approval_program_nested_named_tuple_params_route@11",
      "stack_out": []
    },
    "1200": {
      "block": "approval_program_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1201": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "1202": {
      "block": "approval_program_nested_named_tuple_params_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1204": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "NoOp"
      ]
    },
    "1205": {
      "op": "==",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1206": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1207": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1209": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0"
      ]
    },
    "1210": {
      "op": "!=",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1211": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1212": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1215": {
      "op": "dup",
      "defined_out": [
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ]
    },
    "1216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%48#0",
        "tmp%48#0 (copy)",
        "0"
      ]
    },
    "1217": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%48#0 (copy)",
        "0",
        "8"
      ]
    },
    "1218": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%19#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "item0%19#0"
      ]
    },
    "1219": {
      "op": "btoi",
      "defined_out": [
        "item0%20#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "item0%20#0"
      ]
    },
    "1220": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "tmp%48#0"
      ]
    },
    "1221": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ]
    },
    "1222": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%20#0",
        "tmp%48#0",
        "tmp%48#0 (copy)",
        "8"
      ]
    },
    "1223": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "tmp%48#0",
        "tmp%48#0 (copy)",
        "8",
        "8"
      ]
    },
    "1224": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%20#0",
        "item1%14#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "item0%20#0",
        "tmp%48#0",
        "item1%14#0"
      ]
    },
    "1225": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "tmp%48#0"
      ]
    },
    "1226": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ]
    },
    "1227": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%20#0",
        "item1%14#0",
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "tmp%48#0",
        "tmp%48#0 (copy)",
        "16"
      ]
    },
    "1229": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%20#0",
        "item1%14#0",
        "item_start_offset%10#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "tmp%48#0",
        "item_start_offset%10#0"
      ]
    },
    "1230": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item_start_offset%10#0",
        "tmp%48#0"
      ]
    },
    "1231": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item_start_offset%10#0",
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ]
    },
    "1232": {
      "op": "len",
      "defined_out": [
        "item0%20#0",
        "item1%14#0",
        "item_end_offset%10#0",
        "item_start_offset%10#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item_start_offset%10#0",
        "tmp%48#0",
        "item_end_offset%10#0"
      ]
    },
    "1233": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0",
        "tmp%48#0"
      ]
    },
    "1234": {
      "op": "uncover 2",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item_end_offset%10#0",
        "tmp%48#0",
        "item_start_offset%10#0"
      ]
    },
    "1236": {
      "op": "uncover 2",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "tmp%48#0",
        "item_start_offset%10#0",
        "item_end_offset%10#0"
      ]
    },
    "1238": {
      "op": "substring3",
      "defined_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0"
      ]
    },
    "1239": {
      "op": "dup",
      "defined_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "0"
      ]
    },
    "1241": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "0",
        "8"
      ]
    },
    "1242": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%20#0",
        "item0%21#0",
        "item1%14#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0",
        "item0%21#0"
      ]
    },
    "1243": {
      "op": "btoi",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item2%5#0",
        "item0%22#0"
      ]
    },
    "1244": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0"
      ]
    },
    "1245": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1246": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "8"
      ]
    },
    "1247": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item2%5#0",
        "item_start_offset%11#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0",
        "item_start_offset%11#0"
      ]
    },
    "1248": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item_start_offset%11#0",
        "item2%5#0"
      ]
    },
    "1249": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1250": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "item_start_offset%11#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "10"
      ]
    },
    "1252": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item2%5#0",
        "item_end_offset%11#0",
        "item_start_offset%11#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item_end_offset%11#0"
      ]
    },
    "1253": {
      "op": "dig 1",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item_start_offset%11#0",
        "item2%5#0",
        "item_end_offset%11#0",
        "item2%5#0 (copy)"
      ]
    },
    "1255": {
      "op": "uncover 3",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0",
        "item_end_offset%11#0",
        "item2%5#0 (copy)",
        "item_start_offset%11#0"
      ]
    },
    "1257": {
      "op": "uncover 2",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "item_start_offset%11#0",
        "item_end_offset%11#0"
      ]
    },
    "1259": {
      "op": "substring3",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item1%15#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0",
        "item1%15#0"
      ]
    },
    "1260": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item1%16#0",
        "item2%5#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item2%5#0",
        "item1%16#0"
      ]
    },
    "1263": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%5#0"
      ]
    },
    "1264": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1265": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%5#0",
        "item2%5#0 (copy)",
        "10"
      ]
    },
    "1267": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item1%16#0",
        "item2%5#0",
        "item_start_offset%12#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%5#0",
        "item_start_offset%12#0"
      ]
    },
    "1268": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item_start_offset%12#0",
        "item2%5#0"
      ]
    },
    "1269": {
      "op": "dup",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item_start_offset%12#0",
        "item2%5#0",
        "item2%5#0 (copy)"
      ]
    },
    "1270": {
      "op": "len",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item1%16#0",
        "item2%5#0",
        "item_end_offset%12#0",
        "item_start_offset%12#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item_start_offset%12#0",
        "item2%5#0",
        "item_end_offset%12#0"
      ]
    },
    "1271": {
      "op": "swap",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0",
        "item2%5#0"
      ]
    },
    "1272": {
      "op": "uncover 2",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item_end_offset%12#0",
        "item2%5#0",
        "item_start_offset%12#0"
      ]
    },
    "1274": {
      "op": "uncover 2",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%5#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0"
      ]
    },
    "1276": {
      "op": "substring3",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item1%16#0",
        "item2%6#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%6#0"
      ]
    },
    "1277": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%20#0",
        "item0%22#0",
        "item1%14#0",
        "item1%16#0",
        "item2%7#0"
      ],
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%7#0"
      ]
    },
    "1280": {
      "op": "uncover 4",
      "stack_out": [
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%7#0",
        "item0%20#0"
      ]
    },
    "1282": {
      "op": "uncover 4",
      "stack_out": [
        "item0%22#0",
        "item1%16#0",
        "item2%7#0",
        "item0%20#0",
        "item1%14#0"
      ]
    },
    "1284": {
      "op": "uncover 4",
      "stack_out": [
        "item1%16#0",
        "item2%7#0",
        "item0%20#0",
        "item1%14#0",
        "item0%22#0"
      ]
    },
    "1286": {
      "op": "uncover 4",
      "stack_out": [
        "item2%7#0",
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0"
      ]
    },
    "1288": {
      "op": "uncover 4",
      "stack_out": [
        "item0%20#0",
        "item1%14#0",
        "item0%22#0",
        "item1%16#0",
        "item2%7#0"
      ]
    },
    "1290": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_named_tuple_params",
      "op": "callsub nested_named_tuple_params",
      "defined_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0"
      ],
      "stack_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0"
      ]
    },
    "1293": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0"
      ]
    },
    "1295": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0"
      ]
    },
    "1297": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%16#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0"
      ]
    },
    "1299": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%16#0",
        "elements_to_encode%14#0"
      ]
    },
    "1301": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%16#0",
        "val_as_bytes%6#0"
      ]
    },
    "1302": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%16#0"
      ]
    },
    "1304": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "val_as_bytes%7#0"
      ]
    },
    "1305": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0"
      ]
    },
    "1307": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%17#0 (copy)",
        "elements_to_encode%18#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "elements_to_encode%17#0 (copy)"
      ]
    },
    "1308": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "length%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "length%6#0"
      ]
    },
    "1309": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "as_bytes%16#0"
      ]
    },
    "1310": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "length_uint16%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "elements_to_encode%17#0",
        "length_uint16%6#0"
      ]
    },
    "1313": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "length_uint16%6#0",
        "elements_to_encode%17#0"
      ]
    },
    "1314": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "encoded_value%6#0"
      ]
    },
    "1315": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0"
      ]
    },
    "1317": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "elements_to_encode%18#0 (copy)",
        "encoded_value%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "elements_to_encode%18#0 (copy)"
      ]
    },
    "1318": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%6#0",
        "length%7#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "length%7#0"
      ]
    },
    "1319": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "as_bytes%17#0"
      ]
    },
    "1320": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%18#0",
        "encoded_value%6#0",
        "length_uint16%7#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%18#0",
        "length_uint16%7#0"
      ]
    },
    "1323": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "length_uint16%7#0",
        "elements_to_encode%18#0"
      ]
    },
    "1324": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "encoded_value%7#0"
      ]
    },
    "1325": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1327": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%15#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "val_as_bytes%7#0",
        "0x"
      ]
    },
    "1328": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "0x",
        "val_as_bytes%7#0"
      ]
    },
    "1329": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%35#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%35#0"
      ]
    },
    "1330": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%35#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%35#0",
        "12"
      ]
    },
    "1332": {
      "op": "itob",
      "defined_out": [
        "as_bytes%18#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%35#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%35#0",
        "as_bytes%18#0"
      ]
    },
    "1333": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%35#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%10#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%35#0",
        "offset_as_uint16%10#0"
      ]
    },
    "1336": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%36#0"
      ]
    },
    "1337": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%6#0",
        "encoded_value%6#0 (copy)",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%6#0 (copy)"
      ]
    },
    "1339": {
      "op": "len",
      "defined_out": [
        "data_length%10#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%36#0",
        "data_length%10#0"
      ]
    },
    "1340": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%36#0",
        "data_length%10#0",
        "12"
      ]
    },
    "1342": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%18#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%36#0",
        "current_tail_offset%18#0"
      ]
    },
    "1343": {
      "op": "itob",
      "defined_out": [
        "as_bytes%19#0",
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%36#0",
        "as_bytes%19#0"
      ]
    },
    "1344": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%36#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%11#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%36#0",
        "offset_as_uint16%11#0"
      ]
    },
    "1347": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%37#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0",
        "encoded_tuple_buffer%37#0"
      ]
    },
    "1348": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_tuple_buffer%37#0",
        "encoded_value%6#0"
      ]
    },
    "1349": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%38#0",
        "encoded_value%7#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_value%7#0",
        "encoded_tuple_buffer%38#0"
      ]
    },
    "1350": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%38#0",
        "encoded_value%7#0"
      ]
    },
    "1351": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%39#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%39#0"
      ]
    },
    "1352": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%6#0",
        "encoded_tuple_buffer%39#0",
        "0x"
      ]
    },
    "1353": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%39#0",
        "0x",
        "val_as_bytes%6#0"
      ]
    },
    "1355": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0"
      ]
    },
    "1356": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%41#0",
        "elements_to_encode%15#0"
      ]
    },
    "1358": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0"
      ]
    },
    "1359": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0",
        "18"
      ]
    },
    "1361": {
      "op": "itob",
      "defined_out": [
        "as_bytes%20#0",
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0",
        "as_bytes%20#0"
      ]
    },
    "1362": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0",
        "offset_as_uint16%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%42#0",
        "offset_as_uint16%12#0"
      ]
    },
    "1365": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%43#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%39#0",
        "encoded_tuple_buffer%43#0"
      ]
    },
    "1366": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%43#0",
        "encoded_tuple_buffer%39#0"
      ]
    },
    "1367": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%44#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%44#0"
      ]
    },
    "1368": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%44#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%44#0",
        "0x151f7c75"
      ]
    },
    "1369": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%44#0"
      ]
    },
    "1370": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1371": {
      "op": "log",
      "stack_out": []
    },
    "1372": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1373": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1376": {
      "block": "approval_program_named_tuple_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1378": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "NoOp"
      ]
    },
    "1379": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1380": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1381": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1383": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0"
      ]
    },
    "1384": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1385": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1386": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1389": {
      "op": "dup",
      "defined_out": [
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ]
    },
    "1390": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "0"
      ]
    },
    "1391": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "0",
        "8"
      ]
    },
    "1392": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%17#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "item0%17#0"
      ]
    },
    "1393": {
      "op": "btoi",
      "defined_out": [
        "item0%18#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "item0%18#0"
      ]
    },
    "1394": {
      "op": "swap",
      "stack_out": [
        "item0%18#0",
        "tmp%42#0"
      ]
    },
    "1395": {
      "op": "dup",
      "stack_out": [
        "item0%18#0",
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ]
    },
    "1396": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%18#0",
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "8"
      ]
    },
    "1397": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%18#0",
        "item_start_offset%8#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "item0%18#0",
        "tmp%42#0",
        "item_start_offset%8#0"
      ]
    },
    "1398": {
      "op": "swap",
      "stack_out": [
        "item0%18#0",
        "item_start_offset%8#0",
        "tmp%42#0"
      ]
    },
    "1399": {
      "op": "dup",
      "stack_out": [
        "item0%18#0",
        "item_start_offset%8#0",
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ]
    },
    "1400": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%18#0",
        "item_start_offset%8#0",
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ],
      "stack_out": [
        "item0%18#0",
        "item_start_offset%8#0",
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "10"
      ]
    },
    "1402": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%18#0",
        "item_end_offset%8#0",
        "item_start_offset%8#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "item0%18#0",
        "item_start_offset%8#0",
        "tmp%42#0",
        "item_end_offset%8#0"
      ]
    },
    "1403": {
      "op": "dig 1",
      "stack_out": [
        "item0%18#0",
        "item_start_offset%8#0",
        "tmp%42#0",
        "item_end_offset%8#0",
        "tmp%42#0 (copy)"
      ]
    },
    "1405": {
      "op": "uncover 3",
      "stack_out": [
        "item0%18#0",
        "tmp%42#0",
        "item_end_offset%8#0",
        "tmp%42#0 (copy)",
        "item_start_offset%8#0"
      ]
    },
    "1407": {
      "op": "uncover 2",
      "stack_out": [
        "item0%18#0",
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "item_start_offset%8#0",
        "item_end_offset%8#0"
      ]
    },
    "1409": {
      "op": "substring3",
      "defined_out": [
        "item0%18#0",
        "item1%12#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "item0%18#0",
        "tmp%42#0",
        "item1%12#0"
      ]
    },
    "1410": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%18#0",
        "item1%13#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "item0%18#0",
        "tmp%42#0",
        "item1%13#0"
      ]
    },
    "1413": {
      "op": "swap",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "tmp%42#0"
      ]
    },
    "1414": {
      "op": "dup",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ]
    },
    "1415": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "10"
      ]
    },
    "1417": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%18#0",
        "item1%13#0",
        "item_start_offset%9#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "tmp%42#0",
        "item_start_offset%9#0"
      ]
    },
    "1418": {
      "op": "swap",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item_start_offset%9#0",
        "tmp%42#0"
      ]
    },
    "1419": {
      "op": "dup",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item_start_offset%9#0",
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ]
    },
    "1420": {
      "op": "len",
      "defined_out": [
        "item0%18#0",
        "item1%13#0",
        "item_end_offset%9#0",
        "item_start_offset%9#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item_start_offset%9#0",
        "tmp%42#0",
        "item_end_offset%9#0"
      ]
    },
    "1421": {
      "op": "swap",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0",
        "tmp%42#0"
      ]
    },
    "1422": {
      "op": "uncover 2",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item_end_offset%9#0",
        "tmp%42#0",
        "item_start_offset%9#0"
      ]
    },
    "1424": {
      "op": "uncover 2",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "tmp%42#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "1426": {
      "op": "substring3",
      "defined_out": [
        "item0%18#0",
        "item1%13#0",
        "item2%3#0"
      ],
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item2%3#0"
      ]
    },
    "1427": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%18#0",
        "item1%13#0",
        "item2%4#0"
      ],
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item2%4#0"
      ]
    },
    "1430": {
      "op": "uncover 2",
      "stack_out": [
        "item1%13#0",
        "item2%4#0",
        "item0%18#0"
      ]
    },
    "1432": {
      "op": "uncover 2",
      "stack_out": [
        "item2%4#0",
        "item0%18#0",
        "item1%13#0"
      ]
    },
    "1434": {
      "op": "uncover 2",
      "stack_out": [
        "item0%18#0",
        "item1%13#0",
        "item2%4#0"
      ]
    },
    "1436": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.named_tuple",
      "op": "callsub named_tuple",
      "defined_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0"
      ]
    },
    "1439": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0"
      ]
    },
    "1441": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%12#0",
        "elements_to_encode%11#0"
      ]
    },
    "1442": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%12#0",
        "val_as_bytes%5#0"
      ]
    },
    "1443": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "elements_to_encode%12#0"
      ]
    },
    "1445": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%12#0 (copy)",
        "elements_to_encode%13#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "elements_to_encode%12#0",
        "elements_to_encode%12#0 (copy)"
      ]
    },
    "1446": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "length%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "elements_to_encode%12#0",
        "length%4#0"
      ]
    },
    "1447": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "elements_to_encode%12#0",
        "as_bytes%12#0"
      ]
    },
    "1448": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "length_uint16%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "elements_to_encode%12#0",
        "length_uint16%4#0"
      ]
    },
    "1451": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "length_uint16%4#0",
        "elements_to_encode%12#0"
      ]
    },
    "1452": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%13#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "encoded_value%4#0"
      ]
    },
    "1453": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%13#0"
      ]
    },
    "1455": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%13#0 (copy)",
        "encoded_value%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "elements_to_encode%13#0 (copy)"
      ]
    },
    "1456": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%13#0",
        "encoded_value%4#0",
        "length%5#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "length%5#0"
      ]
    },
    "1457": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "elements_to_encode%13#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "as_bytes%13#0"
      ]
    },
    "1458": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%13#0",
        "encoded_value%4#0",
        "length_uint16%5#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%13#0",
        "length_uint16%5#0"
      ]
    },
    "1461": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "length_uint16%5#0",
        "elements_to_encode%13#0"
      ]
    },
    "1462": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "encoded_value%5#0"
      ]
    },
    "1463": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "1465": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "0x"
      ]
    },
    "1466": {
      "op": "swap",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "0x",
        "val_as_bytes%5#0"
      ]
    },
    "1467": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%29#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%29#0"
      ]
    },
    "1468": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "encoded_tuple_buffer%29#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%29#0",
        "12"
      ]
    },
    "1470": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "encoded_tuple_buffer%29#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%29#0",
        "as_bytes%14#0"
      ]
    },
    "1471": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%29#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%8#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%29#0",
        "offset_as_uint16%8#0"
      ]
    },
    "1474": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "1475": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%30#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%30#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "1477": {
      "op": "len",
      "defined_out": [
        "data_length%8#0",
        "encoded_tuple_buffer%30#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%30#0",
        "data_length%8#0"
      ]
    },
    "1478": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%30#0",
        "data_length%8#0",
        "12"
      ]
    },
    "1480": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%15#0",
        "encoded_tuple_buffer%30#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%30#0",
        "current_tail_offset%15#0"
      ]
    },
    "1481": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "encoded_tuple_buffer%30#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%30#0",
        "as_bytes%15#0"
      ]
    },
    "1482": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%30#0",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%30#0",
        "offset_as_uint16%9#0"
      ]
    },
    "1485": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "1486": {
      "op": "swap",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_tuple_buffer%31#0",
        "encoded_value%4#0"
      ]
    },
    "1487": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%32#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_tuple_buffer%32#0"
      ]
    },
    "1488": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%32#0",
        "encoded_value%5#0"
      ]
    },
    "1489": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0"
      ]
    },
    "1490": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0",
        "0x151f7c75"
      ]
    },
    "1491": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%33#0"
      ]
    },
    "1492": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1493": {
      "op": "log",
      "stack_out": []
    },
    "1494": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1495": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1498": {
      "block": "approval_program_nested_tuple_params_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1500": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "NoOp"
      ]
    },
    "1501": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1502": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1503": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1505": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0"
      ]
    },
    "1506": {
      "op": "!=",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1507": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1508": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1511": {
      "op": "dup",
      "defined_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "1512": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "0"
      ]
    },
    "1513": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%5#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "item_start_offset%5#0"
      ]
    },
    "1514": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%36#0"
      ]
    },
    "1515": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "1516": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%5#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "2"
      ]
    },
    "1517": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%36#0",
        "item_end_offset%5#0"
      ]
    },
    "1518": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%36#0",
        "item_end_offset%5#0",
        "tmp%36#0 (copy)"
      ]
    },
    "1520": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%36#0",
        "item_end_offset%5#0",
        "tmp%36#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "1522": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "1524": {
      "op": "substring3",
      "defined_out": [
        "item0%11#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "item0%11#0"
      ]
    },
    "1525": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%12#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "item0%12#0"
      ]
    },
    "1528": {
      "op": "swap",
      "stack_out": [
        "item0%12#0",
        "tmp%36#0"
      ]
    },
    "1529": {
      "op": "dup",
      "stack_out": [
        "item0%12#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "1530": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%12#0",
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "2"
      ]
    },
    "1531": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%12#0",
        "item_start_offset%6#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "item0%12#0",
        "tmp%36#0",
        "item_start_offset%6#0"
      ]
    },
    "1532": {
      "op": "swap",
      "stack_out": [
        "item0%12#0",
        "item_start_offset%6#0",
        "tmp%36#0"
      ]
    },
    "1533": {
      "op": "dup",
      "stack_out": [
        "item0%12#0",
        "item_start_offset%6#0",
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "1534": {
      "op": "len",
      "defined_out": [
        "item0%12#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item_start_offset%6#0",
        "tmp%36#0",
        "item_end_offset%6#0"
      ]
    },
    "1535": {
      "op": "swap",
      "stack_out": [
        "item0%12#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "tmp%36#0"
      ]
    },
    "1536": {
      "op": "uncover 2",
      "stack_out": [
        "item0%12#0",
        "item_end_offset%6#0",
        "tmp%36#0",
        "item_start_offset%6#0"
      ]
    },
    "1538": {
      "op": "uncover 2",
      "stack_out": [
        "item0%12#0",
        "tmp%36#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "1540": {
      "op": "substring3",
      "defined_out": [
        "item0%12#0",
        "item1%10#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item1%10#0"
      ]
    },
    "1541": {
      "op": "dup",
      "defined_out": [
        "item0%12#0",
        "item1%10#0",
        "item1%10#0 (copy)"
      ],
      "stack_out": [
        "item0%12#0",
        "item1%10#0",
        "item1%10#0 (copy)"
      ]
    },
    "1542": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%12#0",
        "item1%10#0",
        "item1%10#0 (copy)",
        "0"
      ]
    },
    "1543": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%12#0",
        "item1%10#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item1%10#0",
        "item_start_offset%7#0"
      ]
    },
    "1544": {
      "op": "swap",
      "stack_out": [
        "item0%12#0",
        "item_start_offset%7#0",
        "item1%10#0"
      ]
    },
    "1545": {
      "op": "dup",
      "stack_out": [
        "item0%12#0",
        "item_start_offset%7#0",
        "item1%10#0",
        "item1%10#0 (copy)"
      ]
    },
    "1546": {
      "op": "len",
      "defined_out": [
        "item0%12#0",
        "item1%10#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item_start_offset%7#0",
        "item1%10#0",
        "item_end_offset%7#0"
      ]
    },
    "1547": {
      "op": "swap",
      "stack_out": [
        "item0%12#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "item1%10#0"
      ]
    },
    "1548": {
      "op": "dup",
      "stack_out": [
        "item0%12#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "item1%10#0",
        "item1%10#0 (copy)"
      ]
    },
    "1549": {
      "op": "uncover 3",
      "stack_out": [
        "item0%12#0",
        "item_end_offset%7#0",
        "item1%10#0",
        "item1%10#0 (copy)",
        "item_start_offset%7#0"
      ]
    },
    "1551": {
      "op": "uncover 3",
      "stack_out": [
        "item0%12#0",
        "item1%10#0",
        "item1%10#0 (copy)",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "1553": {
      "op": "substring3",
      "defined_out": [
        "item0%12#0",
        "item0%13#0",
        "item1%10#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item1%10#0",
        "item0%13#0"
      ]
    },
    "1554": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%10#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item1%10#0",
        "item0%14#0"
      ]
    },
    "1557": {
      "op": "swap",
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%10#0"
      ]
    },
    "1558": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%10#0",
        "2"
      ]
    },
    "1559": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "item0%12#0",
        "item0%14#0",
        "item1%10#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%10#0",
        "2",
        "8"
      ]
    },
    "1560": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%11#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%11#0"
      ]
    },
    "1561": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%11#0",
        "0"
      ]
    },
    "1562": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item1%11#0",
        "0",
        "8"
      ]
    },
    "1563": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%12#0",
        "item0%14#0",
        "item0%15#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item0%15#0"
      ]
    },
    "1564": {
      "op": "btoi",
      "defined_out": [
        "item0%12#0",
        "item0%14#0",
        "item0%16#0"
      ],
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item0%16#0"
      ]
    },
    "1565": {
      "op": "uncover 2",
      "stack_out": [
        "item0%14#0",
        "item0%16#0",
        "item0%12#0"
      ]
    },
    "1567": {
      "op": "uncover 2",
      "stack_out": [
        "item0%16#0",
        "item0%12#0",
        "item0%14#0"
      ]
    },
    "1569": {
      "op": "uncover 2",
      "stack_out": [
        "item0%12#0",
        "item0%14#0",
        "item0%16#0"
      ]
    },
    "1571": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.nested_tuple_params",
      "op": "callsub nested_tuple_params",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0"
      ]
    },
    "1574": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ]
    },
    "1576": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0"
      ]
    },
    "1577": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%8#0 (copy)",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "elements_to_encode%8#0 (copy)"
      ]
    },
    "1578": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "length%2#0"
      ]
    },
    "1579": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "as_bytes%7#0"
      ]
    },
    "1580": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0",
        "length_uint16%2#0"
      ]
    },
    "1583": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "length_uint16%2#0",
        "elements_to_encode%8#0"
      ]
    },
    "1584": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "encoded_value%2#0"
      ]
    },
    "1585": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0"
      ]
    },
    "1587": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%9#0 (copy)",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "elements_to_encode%9#0 (copy)"
      ]
    },
    "1588": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "encoded_value%2#0",
        "length%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "length%3#0"
      ]
    },
    "1589": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "as_bytes%8#0"
      ]
    },
    "1590": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "encoded_value%2#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "length_uint16%3#0"
      ]
    },
    "1593": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%10#0",
        "length_uint16%3#0",
        "elements_to_encode%9#0"
      ]
    },
    "1594": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%10#0",
        "encoded_value%3#0"
      ]
    },
    "1595": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "elements_to_encode%10#0"
      ]
    },
    "1596": {
      "op": "itob",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "1597": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0",
        "10"
      ]
    },
    "1599": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0",
        "as_bytes%9#0"
      ]
    },
    "1600": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%5#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0",
        "offset_as_uint16%5#0"
      ]
    },
    "1603": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%5#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0",
        "offset_as_uint16%5#0",
        "0x"
      ]
    },
    "1604": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0",
        "0x",
        "offset_as_uint16%5#0"
      ]
    },
    "1605": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "1606": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%4#0"
      ]
    },
    "1607": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "1608": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%21#0",
        "encoded_value%3#0"
      ]
    },
    "1609": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "1610": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "4"
      ]
    },
    "1612": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "as_bytes%10#0"
      ]
    },
    "1613": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_value%2#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "offset_as_uint16%6#0"
      ]
    },
    "1616": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "offset_as_uint16%6#0",
        "0x"
      ]
    },
    "1617": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "0x",
        "offset_as_uint16%6#0"
      ]
    },
    "1618": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "1619": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "1621": {
      "op": "len",
      "defined_out": [
        "data_length%6#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "data_length%6#0"
      ]
    },
    "1622": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "data_length%6#0",
        "4"
      ]
    },
    "1624": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%12#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "current_tail_offset%12#0"
      ]
    },
    "1625": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "as_bytes%11#0"
      ]
    },
    "1626": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "encoded_value%2#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%24#0",
        "offset_as_uint16%7#0"
      ]
    },
    "1629": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "1630": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%2#0"
      ]
    },
    "1632": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "1633": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%26#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "1634": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%27#0"
      ]
    },
    "1635": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%27#0",
        "0x151f7c75"
      ]
    },
    "1636": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%27#0"
      ]
    },
    "1637": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1638": {
      "op": "log",
      "stack_out": []
    },
    "1639": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1640": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1643": {
      "block": "approval_program_run_tests_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1645": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "NoOp"
      ]
    },
    "1646": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1647": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1648": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1650": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "1651": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1652": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1653": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.run_tests",
      "op": "callsub run_tests",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1656": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "1659": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "1660": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "1662": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "1663": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "1664": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "1665": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1666": {
      "op": "log",
      "stack_out": []
    },
    "1667": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1668": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1671": {
      "block": "approval_program_load_tuple_from_box_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1673": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "NoOp"
      ]
    },
    "1674": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1675": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1676": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1678": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "1679": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1680": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1681": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "1684": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)"
      ]
    },
    "1685": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)",
        "0"
      ]
    },
    "1686": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)",
        "0",
        "8"
      ]
    },
    "1687": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%9#0",
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "item0%9#0"
      ]
    },
    "1688": {
      "op": "btoi",
      "defined_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "item0%10#0"
      ]
    },
    "1689": {
      "op": "swap",
      "stack_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "1690": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0",
        "8"
      ]
    },
    "1691": {
      "op": "dup",
      "stack_out": [
        "item0%10#0",
        "reinterpret_bytes[16]%2#0",
        "8",
        "8"
      ]
    },
    "1692": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%10#0",
        "item1%8#0"
      ],
      "stack_out": [
        "item0%10#0",
        "item1%8#0"
      ]
    },
    "1693": {
      "op": "btoi",
      "defined_out": [
        "item0%10#0",
        "item1%9#0"
      ],
      "stack_out": [
        "item0%10#0",
        "item1%9#0"
      ]
    },
    "1694": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple_from_box",
      "op": "callsub load_tuple_from_box",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "1697": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0"
      ]
    },
    "1698": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ]
    },
    "1699": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%2#0",
        "elements_to_encode%7#0"
      ]
    },
    "1700": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1701": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "1702": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%2#0",
        "0x"
      ]
    },
    "1703": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%3#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "1704": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "1705": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%17#0",
        "val_as_bytes%3#0"
      ]
    },
    "1706": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%18#0"
      ]
    },
    "1707": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%18#0",
        "0x151f7c75"
      ]
    },
    "1708": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "1709": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1710": {
      "op": "log",
      "stack_out": []
    },
    "1711": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1712": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1715": {
      "block": "approval_program_is_tuple_in_box_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1717": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "1718": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1719": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1720": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1722": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "1723": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1724": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1725": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "1728": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ]
    },
    "1729": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0"
      ]
    },
    "1730": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "1731": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%7#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "item0%7#0"
      ]
    },
    "1732": {
      "op": "btoi",
      "defined_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "item0%8#0"
      ]
    },
    "1733": {
      "op": "swap",
      "stack_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "1734": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0",
        "8"
      ]
    },
    "1735": {
      "op": "dup",
      "stack_out": [
        "item0%8#0",
        "reinterpret_bytes[16]%1#0",
        "8",
        "8"
      ]
    },
    "1736": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%8#0",
        "item1%6#0"
      ],
      "stack_out": [
        "item0%8#0",
        "item1%6#0"
      ]
    },
    "1737": {
      "op": "btoi",
      "defined_out": [
        "item0%8#0",
        "item1%7#0"
      ],
      "stack_out": [
        "item0%8#0",
        "item1%7#0"
      ]
    },
    "1738": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.is_tuple_in_box",
      "op": "callsub is_tuple_in_box",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1741": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "1744": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "1745": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "1747": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "1748": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "1749": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "1750": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1751": {
      "op": "log",
      "stack_out": []
    },
    "1752": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1753": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1756": {
      "block": "approval_program_store_tuple_in_box_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1758": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "1759": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1760": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1761": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1763": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "1764": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1765": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1766": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "1769": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ]
    },
    "1770": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0"
      ]
    },
    "1771": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1772": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%5#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%5#0"
      ]
    },
    "1773": {
      "op": "btoi",
      "defined_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%6#0"
      ]
    },
    "1774": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "1775": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0",
        "8"
      ]
    },
    "1776": {
      "op": "dup",
      "stack_out": [
        "item0%6#0",
        "reinterpret_bytes[16]%0#0",
        "8",
        "8"
      ]
    },
    "1777": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%6#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0"
      ]
    },
    "1778": {
      "op": "btoi",
      "defined_out": [
        "item0%6#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%5#0"
      ]
    },
    "1779": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple_in_box",
      "op": "callsub store_tuple_in_box",
      "stack_out": []
    },
    "1782": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1783": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1786": {
      "block": "approval_program_load_tuple_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1788": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "1789": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1790": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1791": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1793": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "1794": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1795": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1796": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.load_tuple",
      "op": "callsub load_tuple",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "1799": {
      "op": "cover 5",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "1801": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "1803": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "1805": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "1807": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0"
      ]
    },
    "1809": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "1810": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0"
      ]
    },
    "1812": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "1813": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0"
      ]
    },
    "1815": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "1816": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "length%0#0"
      ]
    },
    "1817": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "as_bytes%0#0"
      ]
    },
    "1818": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%3#0",
        "length_uint16%0#0"
      ]
    },
    "1821": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "length_uint16%0#0",
        "elements_to_encode%3#0"
      ]
    },
    "1822": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0"
      ]
    },
    "1823": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0"
      ]
    },
    "1825": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "1826": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "length%1#0"
      ]
    },
    "1827": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "as_bytes%1#0"
      ]
    },
    "1828": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0",
        "length_uint16%1#0"
      ]
    },
    "1831": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0",
        "elements_to_encode%4#0"
      ]
    },
    "1832": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "encoded_value%1#0"
      ]
    },
    "1833": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1835": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "0x"
      ]
    },
    "1836": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%1#0"
      ]
    },
    "1837": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1838": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "12"
      ]
    },
    "1840": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%2#0"
      ]
    },
    "1841": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "1844": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1845": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1847": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "1848": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "12"
      ]
    },
    "1850": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "1851": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%3#0"
      ]
    },
    "1852": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1855": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1856": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ]
    },
    "1857": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1858": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0"
      ]
    },
    "1859": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1860": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0",
        "0x"
      ]
    },
    "1861": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "encoded_tuple_buffer%5#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "1863": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1864": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%7#0",
        "elements_to_encode%1#0"
      ]
    },
    "1866": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1867": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "18"
      ]
    },
    "1869": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "as_bytes%4#0"
      ]
    },
    "1870": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%2#0"
      ]
    },
    "1873": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1874": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1875": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1876": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "4"
      ]
    },
    "1878": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "as_bytes%5#0"
      ]
    },
    "1879": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0"
      ]
    },
    "1882": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%3#0",
        "0x"
      ]
    },
    "1883": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "0x",
        "offset_as_uint16%3#0"
      ]
    },
    "1884": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1885": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1886": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%10#0 (copy)"
      ]
    },
    "1887": {
      "op": "len",
      "defined_out": [
        "data_length%3#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0"
      ]
    },
    "1888": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "data_length%3#0",
        "4"
      ]
    },
    "1890": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "current_tail_offset%6#0"
      ]
    },
    "1891": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "as_bytes%6#0"
      ]
    },
    "1892": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%12#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0"
      ]
    },
    "1895": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "offset_as_uint16%4#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1897": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%12#0",
        "offset_as_uint16%4#0"
      ]
    },
    "1898": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "1899": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%13#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1900": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "1901": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "elements_to_encode%5#0"
      ]
    },
    "1902": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0"
      ]
    },
    "1903": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0",
        "0x151f7c75"
      ]
    },
    "1904": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "1905": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1906": {
      "op": "log",
      "stack_out": []
    },
    "1907": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1908": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "1911": {
      "block": "approval_program_store_tuple_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1913": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1914": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1915": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1916": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1918": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1919": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1920": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1921": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1924": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1925": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "1926": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item_start_offset%0#0"
      ]
    },
    "1927": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0"
      ]
    },
    "1928": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1929": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "1930": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "item_end_offset%0#0"
      ]
    },
    "1931": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%7#0",
        "item_end_offset%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1933": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "item_end_offset%0#0",
        "tmp%7#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "1935": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1937": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0"
      ]
    },
    "1938": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "1939": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "1940": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%0#0",
        "item0%0#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1941": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%1#0"
      ]
    },
    "1942": {
      "op": "btoi",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "item0%0#0",
        "item0%2#0"
      ]
    },
    "1943": {
      "op": "cover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0"
      ]
    },
    "1945": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "1946": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8"
      ]
    },
    "1947": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "1948": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item0%0#0",
        "item1%0#0"
      ]
    },
    "1949": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0"
      ]
    },
    "1950": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "1951": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%0#0",
        "item0%0#0 (copy)",
        "item0%2#0",
        "item1%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "16"
      ]
    },
    "1953": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "1954": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0"
      ]
    },
    "1955": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "1956": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "1957": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "item0%0#0"
      ]
    },
    "1958": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item_end_offset%1#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "1960": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "1962": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0"
      ]
    },
    "1963": {
      "op": "dup",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "1964": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0"
      ]
    },
    "1965": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1966": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item0%3#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item0%3#0"
      ]
    },
    "1967": {
      "op": "btoi",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item2%0#0",
        "item0%4#0"
      ]
    },
    "1968": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0"
      ]
    },
    "1969": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "1970": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "8"
      ]
    },
    "1971": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_start_offset%2#0"
      ]
    },
    "1972": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0"
      ]
    },
    "1973": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "1974": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "1976": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0"
      ]
    },
    "1977": {
      "op": "dig 1",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item_start_offset%2#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)"
      ]
    },
    "1979": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item_end_offset%2#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "1981": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "1983": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%1#0"
      ]
    },
    "1984": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item2%0#0",
        "item1%2#0"
      ]
    },
    "1987": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "1988": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "1989": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item2%0#0 (copy)",
        "10"
      ]
    },
    "1991": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "1992": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0"
      ]
    },
    "1993": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item2%0#0 (copy)"
      ]
    },
    "1994": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item2%0#0",
        "item_end_offset%3#0"
      ]
    },
    "1995": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "item2%0#0"
      ]
    },
    "1996": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%3#0",
        "item2%0#0",
        "item_start_offset%3#0"
      ]
    },
    "1998": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "2000": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0"
      ]
    },
    "2001": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0"
      ]
    },
    "2004": {
      "op": "dig 4",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2006": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "2007": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item_start_offset%4#0"
      ]
    },
    "2008": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0"
      ]
    },
    "2009": {
      "op": "dig 5",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2011": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item2%2#0",
        "item_end_offset%4#0"
      ]
    },
    "2012": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%7#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0"
      ]
    },
    "2013": {
      "op": "uncover 6",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "tmp%7#0"
      ]
    },
    "2015": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item2%2#0",
        "tmp%7#0",
        "item_start_offset%4#0"
      ]
    },
    "2017": {
      "op": "uncover 3",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%7#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "2019": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item1%3#0",
        "item2%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "2020": {
      "op": "uncover 5",
      "stack_out": [
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0"
      ]
    },
    "2022": {
      "op": "uncover 5",
      "stack_out": [
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0"
      ]
    },
    "2024": {
      "op": "uncover 5",
      "stack_out": [
        "item1%2#0",
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0"
      ]
    },
    "2026": {
      "op": "uncover 5",
      "stack_out": [
        "item2%2#0",
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0"
      ]
    },
    "2028": {
      "op": "uncover 5",
      "stack_out": [
        "item1%3#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0"
      ]
    },
    "2030": {
      "op": "uncover 5",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%2#0",
        "item1%3#0"
      ]
    },
    "2032": {
      "callsub": "test_cases.tuple_support.nested_tuples.NestedTuples.store_tuple",
      "op": "callsub store_tuple",
      "stack_out": []
    },
    "2035": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2036": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    },
    "2039": {
      "block": "approval_program_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "2041": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0"
      ]
    },
    "2042": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%50#0"
      ]
    },
    "2043": {
      "op": "match approval_program___algopy_default_create@15",
      "stack_out": []
    },
    "2047": {
      "block": "approval_program_switch_case_next@19",
      "stack_in": [],
      "op": "b approval_program_after_if_else@20"
    },
    "2050": {
      "block": "approval_program___algopy_default_create@15",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "2052": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0"
      ]
    },
    "2053": {
      "op": "==",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "2054": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "2055": {
      "block": "approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__algopy_default_create@17",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2056": {
      "op": "b approval_program_after_inlined_test_cases.tuple_support.nested_tuples.NestedTuples.__puya_arc4_router__@21"
    }
  }
}